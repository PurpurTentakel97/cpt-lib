# copied from: https://github.com/lukka/CppBuildTasks-Validation/blob/v10/.github/workflows/hosted-pure-workflow.yml

# Copyright (c) 2021-2022 Luca Cappa
# Released under the term specified in file LICENSE.txt
# SPDX short identifier: MIT

# A "pure" GitHub workflow using CMake, Ninja and vcpkg to build a C/C++ codebase.
# It leverages both CMakePresets.json and vcpkg.json to have consistent build locallly
# and on continuous integration servers (aka build agents).
# It is called "pure workflow" because it is an example which minimizes the usage of
# custom GitHub actions, but leverages directly the tools that could be easily run on
# your development machines (i.e. CMake, vcpkg, Ninja) to ensure a perfectly identical
# and reproducible build locally (on your development machine) and remotely (on build agents).
name: cpt
on:
  push:
    branches: [ main, dev ]
  workflow_dispatch: # started manually
  pull_request:
    branches: [ main, dev ] # PRs against the master branch

jobs:
  job:
    name: ${{ matrix.build }}-${{ matrix.os }}-${{ github.workflow }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        build: [ Release, Debug ]
        include:
          - os: windows-latest
          - os: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0

      # Setup the build machine with the most recent versions of CMake and Ninja. Both are cached if not already: on subsequent runs both will be quickly restored from GitHub cache service.
      - uses: lukka/get-cmake@latest

      # On Windows runners, let's ensure to have the Developer Command Prompt environment setup correctly. As used here the Developer Command Prompt created is targeting x64 and using the default the Windows SDK.
      - uses: ilammy/msvc-dev-cmd@v1

      - name: Install GCC 13
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          sudo apt-get update
          sudo apt-get install -y gcc-13 g++-13
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-13 100
        if: ${{ matrix.os == 'ubuntu-latest' }}

      # Run CMake to generate Ninja project files, using the vcpkg's toolchain file to resolve and install the dependencies as specified in vcpkg.json.
      - name: Install dependencies and generate project files
        run: |
          cmake -S . -B build -G "Ninja" -DCMAKE_INSTALL_PREFIX=INSTALL
        working-directory: "${{ github.workspace }}"

      # Build the whole project with Ninja (which is spawn by CMake).
      - name: Build ${{matrix.os}} / ${{matrix.build}}
        run: |
          cmake --build build --config ${{matrix.build}}
        working-directory: "${{ github.workspace }}"

      # install the whole project
      - name: Install ${{matrix.os}} / ${{matrix.build}}
        run: |
          cmake --install build
        working-directory: "${{ github.workspace }}"

      - name: Show content of workspace at its completion
        run: find $RUNNER_WORKSPACE
        shell: bash

      - name: Test Suite
        run: ctest --test-dir build --output-on-failure
